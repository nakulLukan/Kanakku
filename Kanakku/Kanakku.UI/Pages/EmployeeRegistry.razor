@page "/employee-registry"
@using AutoMapper
@using Kanakku.Application.Models.DailyOperation
@using Kanakku.Application.Models.User
@using Kanakku.Application.Requests.User
@using Kanakku.UI.Contracts.Event
@using MediatR
@using Kanakku.UI.Components
@inject IMediator Mediator;
@inject IAppMediator AppMediator;
@inject IMapper Mapper
@using Kanakku.Shared.Extensions

<h5 class="mb-5">Salary History</h5>

<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="12" sm="3">
        <MudForm Model="employeeRegistry" ValidationDelay="1"
                 @ref="employeeRegistryForm" Validation="employeeRegistryValidator.ValidateValue"
                 Class="bg-white p-4">
            <MudStack>
                <SearchableSelect T="Guid?" @bind-SelectedItem="employeeRegistry.EmployeeId" Label="Employee"
                                  Values="employees.Where(x=> !x.IsResigned).Select(x=> ((Guid?)x.EmployeeId, x.EmployeeName)).ToList()"
                                  For="@(() => employeeRegistry.EmployeeId)"
                                  ValueChanged="GetUserSalary" />
                <MudDatePicker @bind-Date="@employeeRegistry.SalaryPeriod"
                               For="@(() => employeeRegistry.SalaryPeriod)"
                               Margin="Margin.Dense"
                               Variant="Variant.Outlined"
                               Label="Month/Year"
                               FixDay="1"
                               DateFormat="MMM/yyyy"
                               OpenTo="OpenTo.Month"
                               MaxDate="DateTime.Now"
                               PickerMonthChanged="(async x=> {employeeRegistry.SalaryPeriod = x; await GetUserSalary();})" />
                <MudNumericField @bind-Value="@employeeRegistry.NumberOfDaysPresent"
                                 For="@(() => employeeRegistry.NumberOfDaysPresent)"
                                 Variant="Variant.Outlined"
                                 Label="Number of days present"
                                 Margin="Margin.Dense"
                                 T="int"
                                 Min="0" />
                <MudNumericField @bind-Value="@employeeRegistry.SalaryPerPeriod"
                                 For="@(() => employeeRegistry.SalaryPerPeriod)"
                                 Label="Salary"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 T="float"
                                 Min="0" />
                <MudNumericField @bind-Value="@employeeRegistry.Bonus"
                                 For="@(() => employeeRegistry.Bonus)"
                                 Label="Bonus"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 T="float?"
                                 Min="0" />

                <MudStack Row=true Justify="Justify.SpaceBetween">
                    <div>
                        <MudButton Color="Color.Transparent" OnClick="OnReset">Reset</MudButton>
                    </div>
                    <MudButton Color="Color.Success" Variant="MudBlazor.Variant.Filled" OnClick="AddEntry">Submit</MudButton>
                </MudStack>
            </MudStack>
        </MudForm>
    </MudItem>
    <MudItem sm="9" xs="12">
        <MudTable Items="@registry" FixedHeader="true"
                  Dense="true" RowsPerPage="10"
                  Bordered="true" Hover="true" Striped="true"
                  Loading="isDataLoading"
                  CustomFooter="true"
                  Virtualize="true">
            <ToolBarContent>
                <div class="d-flex flex-row justify-space-between w-100">
                    <MudText Typo="Typo.h6">Salary History</MudText>
                    <MudStack Row="true" Spacing="1">
                        <MudItem>
                            <MudSwitch @bind-Checked="@showBonus" ThumbIcon="@(showBonus ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)" ThumbIconColor="@(showBonus ? Color.Success : Color.Error)">Show Bonus</MudSwitch>
                        </MudItem>
                        <MudItem>
                            <MudBadge Dot="true" Color="Color.Secondary" Overlap="true" Bordered="true" Elevation="5"
                                      Visible="@(filter.DateFilter.HasValue
                                || filter.From.HasValue
                                || filter.To.HasValue
                                || (filter.Employees!=null && filter.Employees.Any())
                                        || (filter.Designations!=null && filter.Designations.Any()))">
                                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" aria-label="filter"
                                               Color="Color.Tertiary" Variant="Variant.Filled"
                                               OnClick="(()=> showFilterWindow = true)"></MudIconButton>
                            </MudBadge>
                        </MudItem>
                        <MudItem>
                            <ExportButton OnClickAction="(()=> Mediator.Send(Mapper.Map(filter, new EmployeeRegistryExportCommand())))" />
                        </MudItem>
                    </MudStack>

                </div>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Employee Name</MudTh>
                <MudTh>Employee Code</MudTh>
                <MudTh>Period</MudTh>
                <MudTh>Present Days</MudTh>
                <MudTh>Salary</MudTh>
                @if (showBonus)
                {
                    <MudTh>Bonus</MudTh>
                }
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Employee Name">@context.EmpName</MudTd>
                <MudTd DataLabel="Employee Code">@context.EmpCode</MudTd>
                <MudTd DataLabel="Period">@context.SalaryMonth.ToString("MMM/yyyy")</MudTd>
                <MudTd DataLabel="Present Days">@context.DaysPresent</MudTd>
                <MudTd DataLabel="Salary">@context.Salary.ToCurrency()</MudTd>
                @if (showBonus)
                {
                    <MudTd DataLabel="Bonus">@context.Bonus.ToCurrency()</MudTd>
                }
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="(()=> EditRegistry(context.Id))" Size="Size.Small"> Edit</MudButton>
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudTFootRow>
                    <MudTd colspan="7">
                        <MudStack Row="true" Spacing="5" Justify="Justify.FlexEnd">
                            <MudText>Total Salary: <b>@registry.Sum(x=>x.Salary).ToCurrency()</b></MudText>
                            @if (showBonus)
                            {
                                <MudText>Total Bonus: <b>@registry.Sum(x=>x.Bonus).ToCurrency()</b></MudText>
                            }
                        </MudStack>
                    </MudTd>
                </MudTFootRow>
            </FooterContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@*Filter window*@
<MudDialog IsVisible="showFilterWindow" Options="AppUIConstant.NormalDialogOption">
    <TitleContent>
        <MudText Typo="Typo.h6">Configure filter conditions</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <MudExpansionPanels>
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudBadge Icon="@Icons.Material.Rounded.FilterAlt" Color="Color.Success" Overlap="true" Bordered="true" Elevation="5"
                                      Visible="@(filter.DateFilter.HasValue
                                || filter.From.HasValue
                                || filter.To.HasValue)">
                                <MudText Typo="Typo.subtitle2">Filter by 'Period'</MudText>
                            </MudBadge>
                        </TitleContent>
                        <ChildContent>
                            <MudRadioGroup @bind-SelectedOption="@filter.DateFilter">
                                <MudRadio Dense="false" T="EmployeeSalaryDateFilter?" Option="@EmployeeSalaryDateFilter.ThisMonth" Color="Color.Primary">This Month</MudRadio>
                                <MudRadio Dense="false" T="EmployeeSalaryDateFilter?" Option="@EmployeeSalaryDateFilter.ThisYear" Color="Color.Primary">This Year</MudRadio>
                            </MudRadioGroup>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudDatePicker @bind-Date="filter.From" Label="From" FixDay="1" OpenTo="OpenTo.Month" DateFormat="MMM-yyyy"></MudDatePicker>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudDatePicker @bind-Date="filter.To" Label="To" FixDay="1" OpenTo="OpenTo.Month" DateFormat="MMM-yyyy"></MudDatePicker>
                                </MudItem>
                            </MudGrid>
                        </ChildContent>

                    </MudExpansionPanel>
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudBadge Icon="@Icons.Material.Rounded.FilterAlt" Color="Color.Success" Overlap="true" Bordered="true" Elevation="5"
                                      Visible="@(filter.Employees != null && filter.Employees.Any())">
                                <MudText Typo="Typo.subtitle2">Filter by 'Employee'</MudText>
                            </MudBadge>
                        </TitleContent>
                        <ChildContent>
                            <MudSelect Dense="true" MultiSelection="true" HelperText="Worked By" T="Guid" Label="Worked By"
                                       SelectAll="true"
                                       @bind-SelectedValues="filter.Employees" MultiSelectionTextFunc="GetMultiSelectedEmployees">
                                @foreach (var emp in employees)
                                {
                                    <MudSelectItem T="Guid" Value="@(emp.EmployeeId)">@emp.EmployeeName</MudSelectItem>
                                }
                            </MudSelect>
                        </ChildContent>

                    </MudExpansionPanel>
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudBadge Icon="@Icons.Material.Rounded.FilterAlt" Color="Color.Success" Overlap="true" Bordered="true" Elevation="5"
                                      Visible="@(filter.Designations != null && filter.Designations.Any())">
                                <MudText Typo="Typo.subtitle2">Filter by 'Designation'</MudText>
                            </MudBadge>
                        </TitleContent>
                        <ChildContent>
                            <MudSelect Dense="true" MultiSelection="true" HelperText="Designation" T="int" Label="Designation"
                                       SelectAll="true"
                                       @bind-SelectedValues="filter.Designations" MultiSelectionTextFunc="GetMultiSelectedDesignations">
                                @foreach (var designation in designations)
                                {
                                    <MudSelectItem T="int" Value="@(designation.Id)">@designation.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </ChildContent>

                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex flex-row justify-space-between">
                    <div>
                        <MudButton OnClick="(()=> showFilterWindow = false)" Variant="Variant.Outlined" Color="Color.Transparent">Close</MudButton>
                        <MudButton OnClick="ResetFilterCondition" Variant="Variant.Outlined" Color="Color.Secondary">Clear Filter</MudButton>
                    </div>
                    <MudButton OnClick="FilterGridData" Variant="Variant.Filled" Color="Color.Success">Apply Filter</MudButton>
                </div>
            </MudItem>
        </MudGrid>

    </DialogContent>
</MudDialog>

@**@

@*Edit salary history entry*@
<MudDialog IsVisible="showEditForm" Options="AppUIConstant.NormalDialogOption">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="ms-4 mt-5 mb-3">Edit Salary History</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="editEmployeeRegistry" ValidationDelay="1"
                 @ref="editSalaryHistory" Validation="editModelValidator.ValidateValue"
                 Class="bg-white p-4">
            <MudStack>
                <SearchableSelect T="Guid?" @bind-SelectedItem="editEmployeeRegistry.EmployeeId" Label="Employee"
                                  Values="employees.Select(x=> ((Guid?)x.EmployeeId, x.EmployeeName)).ToList()"
                                  For="@(() => editEmployeeRegistry.EmployeeId)" />
                <MudDatePicker @bind-Date="@editEmployeeRegistry.SalaryPeriod"
                               For="@(() => editEmployeeRegistry.SalaryPeriod)"
                               Margin="Margin.Dense"
                               Variant="Variant.Outlined"
                               Label="Month/Year"
                               FixDay="1"
                               DateFormat="MMM-yyyy"
                               OpenTo="OpenTo.Month"
                               MaxDate="DateTime.Now" />
                <MudNumericField @bind-Value="@editEmployeeRegistry.NumberOfDaysPresent"
                                 For="@(() => editEmployeeRegistry.NumberOfDaysPresent)"
                                 Variant="Variant.Outlined"
                                 Label="Number of days present"
                                 Margin="Margin.Dense"
                                 T="int"
                                 Min="0" />
                <MudNumericField @bind-Value="@editEmployeeRegistry.SalaryPerPeriod"
                                 For="@(() => editEmployeeRegistry.SalaryPerPeriod)"
                                 Label="Salary"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 T="float"
                                 Min="0" />
                <MudNumericField @bind-Value="@editEmployeeRegistry.Bonus"
                                 For="@(() => editEmployeeRegistry.Bonus)"
                                 Label="Bonus"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 T="float?"
                                 Min="0" />

                <MudStack Row=true Justify="Justify.SpaceBetween">
                    <div>
                        <MudButton Color="Color.Transparent" OnClick="(() => showEditForm = false)">Close</MudButton>
                    </div>
                    <MudButton Color="Color.Success" Variant="MudBlazor.Variant.Filled" OnClick="EditEntry">Submit</MudButton>
                </MudStack>
            </MudStack>
        </MudForm>

    </DialogContent>
</MudDialog>

@code {
    EmployeeRegistryEntryDto employeeRegistry = new();
    EmployeeRegistryEntryDto employeeRegistryReset = new();
    EmployeeRegistryEntryDtoValidator employeeRegistryValidator = new();
    MudForm employeeRegistryForm;

    bool showEditForm = false;
    MudForm editSalaryHistory;
    EmployeeRegistryEntryDto editEmployeeRegistry = new();
    EmployeeRegistryEntryDtoValidator editModelValidator = new();

    EmployeeMappingDto[] employees = new EmployeeMappingDto[0];
    List<DesignationDto> designations = new();

    EmployeeRegistryDto[] registry = new EmployeeRegistryDto[0];
    bool showFilterWindow = false;
    bool isDataLoading = false;
    EmployeeRegistryFilterDto filter = new();
    bool showBonus = false;

    protected override async Task OnInitializedAsync()
    {
        var employeesTask = Mediator.Send(new EmployeeMappingQuery());
        var designationTask = Mediator.Send(new GetAllDesignationQuery());

        await Task.WhenAll(employeesTask, designationTask);
        employees = employeesTask.Result;
        designations = designationTask.Result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            registry = await Mediator.Send(BuildFilterDto());
            StateHasChanged();
        }

    }

    async Task AddEntry()
    {
        await employeeRegistryForm.Validate();
        if (!employeeRegistryForm.IsValid)
        {
            return;
        }
        await AppMediator.Send(Mapper.Map(employeeRegistry, new EmployeeRegistryEntryCommand()))
        .OnSuccess(async data =>
        {
            ToastService.Success("Entry added successfully");
            registry = await Mediator.Send(BuildFilterDto());

            await InvokeAsync(() =>
            {
                var lastSelectedDate = employeeRegistry.SalaryPeriod;
                OnReset();

                // Keep the state
                employeeRegistry.SalaryPeriod = lastSelectedDate;
                StateHasChanged();
            });
        })
    .OnError(err =>
    {
        ToastService.Error(err.Message);
    });
    }

    void OnReset()
    {
        employeeRegistry = new();
        employeeRegistryForm.ResetValidation();
    }

    string GetMultiSelectedEmployees(List<string> selectedValues)
    {
        if (!selectedValues.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", selectedValues.Select(x => employees.First(y => y.EmployeeId.ToString() == x).EmployeeName));
    }

    string GetMultiSelectedDesignations(List<string> selectedValues)
    {
        if (!selectedValues.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", selectedValues.Select(x => designations.First(y => y.Id.ToString() == x).Name));
    }

    void ResetFilterCondition()
    {
        filter = new();
    }


    async Task FilterGridData()
    {
        showFilterWindow = false;

        isDataLoading = true;
        StateHasChanged();
        registry = await Mediator.Send(BuildFilterDto());
        isDataLoading = false;
        StateHasChanged();
    }

    EmployeeRegistryQuery BuildFilterDto()
    {
        return new EmployeeRegistryQuery
            {
                DateFilter = filter.DateFilter,
                Employees = filter.Employees,
                From = filter.From,
                To = filter.To,
                Designations = filter.Designations,
                ShowBonus = showBonus
            };
    }

    async Task GetUserSalary()
    {
        if (!employeeRegistry.EmployeeId.HasValue || !employeeRegistry.SalaryPeriod.HasValue)
        {
            return;
        }

        employeeRegistry.SalaryPerPeriod = await Mediator.Send(new GetUserSalaryPerMonthQuery()
            {
                EmpId = employeeRegistry.EmployeeId.Value,
                SalaryMonth = employeeRegistry.SalaryPeriod.Value
            });
    }

    async Task EditRegistry(int contextId)
    {
        editEmployeeRegistry = await Mediator.Send(new GetSalaryHistoryByIdQuery()
            {
                Id = contextId
            });
        showEditForm = true;
    }

    async Task EditEntry()
    {
        await editSalaryHistory.Validate();
        if (!editSalaryHistory.IsValid)
        {
            return;
        }
        await AppMediator.Send(Mapper.Map(editEmployeeRegistry, new EmployeeRegistryEntryCommand()))
        .OnSuccess(async data =>
        {
            ToastService.Success("Entry updated successfully");
            registry = await Mediator.Send(BuildFilterDto());
            showEditForm = false;
            await InvokeAsync(StateHasChanged);
        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
        });
    }
}
