@using AutoMapper
@using Kanakku.Application.Contracts.Presentation
@using Kanakku.Application.Contracts.Storage
@using Kanakku.Application.Models.DailyOperation
@using Kanakku.Application.Models.Product;
@using Kanakku.Application.Requests.DailyOperation
@using Kanakku.Application.Requests.Product
@using Kanakku.Application.Requests.User
@using Kanakku.Shared.Extensions
@using Kanakku.UI.Contracts.Event
@using MediatR
@using System.Linq;

@inject IMediator Mediator
@inject IAppMediator AppMediator
@inject IMapper Mapper;
@inject IToastService ToastService;
@inject IMediator Mediator

<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="12" sm="3">
        <MudForm Model="dailyOperation" ValidationDelay="1"
                 @ref="addOperationForm" Validation="dailyOperationValidator.ValidateValue"
                 Class="bg-white p-4">
            <div class="d-flex flex-row flex-wrap gap-3">
                <MudDatePicker @bind-Date="@dailyOperation.WorkedOn"
                               For="@(() => dailyOperation.WorkedOn)"
                               Margin="Margin.Dense"> </MudDatePicker>
                <MudTimePicker @bind-Time="@dailyOperation.WorkedTime"
                               For="@(() => dailyOperation.WorkedTime)"
                               Margin="Margin.Dense"> </MudTimePicker>
                <SearchableSelect T="int?" @bind-SelectedItem="dailyOperation.ProductId" Label="Product"
                                  Values="Products.Select(x=> ((int?)x.ProductId, x.ProductName)).ToList()"
                                  ValueChanged="OnProductSelect"
                                  For="@(() => dailyOperation.ProductId)" />
                <SearchableSelect T="int?" @bind-SelectedItem="dailyOperation.OperationId" Label="Operation"
                                  Values="Operations.Select(x=> ((int?)x.OperationId, x.OperationName)).ToList()"
                                  ValueChanged="OnOperationSelect"
                                  For="@(() => dailyOperation.OperationId)" />
                <SearchableSelect T="Guid?" @bind-SelectedItem="dailyOperation.WorkedBy" Label="Employee"
                                  Values="Employees.Where(x=> !x.IsResigned).Select(x=> ((Guid?)x.EmployeeId, x.EmployeeName)).ToList()"
                                  For="@(() => dailyOperation.WorkedBy)" />
                <div class="d-flex flex-wrap  flex-grow-1 gap-2 justify-space-between">
                    @foreach (var variant in dailyOperation.VariantsPerOperation)
                    {
                        <MudPaper Class="border border-1 product-variant-quantity-border flex-grow-1" Elevation="0">
                            <MudText Class="n2 ps-4 pt-2" Typo="Typo.caption">Size</MudText>
                            <MudStack Row="true" Class="ps-2 pe-2" Spacing="1" Justify="Justify.FlexStart">
                                <MudCheckBox @bind-Checked="variant.IsChecked" Class="m-0 p-0"
                                         Dense="true"
                                         T="bool" Label="@variant.SizeName"></MudCheckBox>
                                <MudNumericField T="int" Class="ml-3 mt-0" Label="Quantity"
                                             HideSpinButtons="true" Min="0"
                                             Margin="Margin.Dense"
                                             @bind-Value="@variant.Quantity" Variant="Variant.Outlined" Style="max-width: 80px;"></MudNumericField>
                                @if (variant.NetQuantity.HasValue)
                                {
                                    <MudLink @onclick="(() => ToggleQuantityUpdatePopup(variant))"
                                     Typo="Typo.caption" Class="cursor-pointer">Balance: @variant.NetQuantity</MudLink>
                                }
                            </MudStack>
                        </MudPaper>
                    }
                    <MudPopover Fixed="true" Open="showUpdateQuantityPopover" Paper="true"
                                Class="p-4">
                        <MudNumericField T="int?" HelperText="@($"Update Quantity of '{sizeName}'")"
                                         Immediate="true"
                                         Label="Enter Quantity" InputType="InputType.Number"
                                         Variant="Variant.Text" Class="mb-2"
                                         @bind-Value="selectedQuantity" Min="0" />
                        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit"
                                   OnClick="UpdateQuantity">Update</MudButton>
                        <MudButton Size="Size.Small" Variant="Variant.Text" OnClick="(()=> showUpdateQuantityPopover = false)">Close</MudButton>
                    </MudPopover>
                </div>

                <div class="d-flex flex-row justify-space-between my-8 w-100">
                    <div>
                        <MudButton Color="Color.Transparent" OnClick="ResetDetails">Reset</MudButton>
                    </div>
                    <MudButton Color="Color.Success" Variant="MudBlazor.Variant.Filled" OnClick="SubmitDetails">Submit</MudButton>
                </div>
            </div>
        </MudForm>
    </MudItem>
    <MudItem sm="9" xs="12">
        <MudTable Items="@OperationItems" FixedHeader="true"
                  Dense="true" RowsPerPage="10"
                  Bordered="true" Hover="true" Striped="true"
                  Loading="isDataLoading"
                  CustomFooter="true"
                  Virtualize="true">
            <ToolBarContent>
                <div class="d-flex flex-row justify-space-between w-100">
                    <MudText Typo="Typo.h6">Operations </MudText>
                    <MudStack Row="true" Spacing="1">
                        <MudItem>
                            <MudBadge Dot="true" Color="Color.Secondary" Overlap="true" Bordered="true" Elevation="5"
                                      Visible="@(filter.WorkedBy != null && filter.WorkedBy.Any()
                                ||filter.Products != null && filter.Products.Any()
                                || filter.WorkedFrom.HasValue || filter.WorkedTo.HasValue)">
                                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" aria-label="filter"
                                               Color="Color.Tertiary" Variant="Variant.Filled"
                                               OnClick="(()=> showFilterWindow = true)"></MudIconButton>
                            </MudBadge>
                        </MudItem>
                        <MudItem>
                            <ExportButton OnClickAction="ExportDailyOperations" />
                        </MudItem>
                    </MudStack>
                </div>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Worked By</MudTh>
                <MudTh>Worked On</MudTh>
                <MudTh>Product</MudTh>
                <MudTh>Operation</MudTh>
                <MudTh>Size</MudTh>
                <MudTh>Qty</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Amt</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Worked By">@context.WorkedBy</MudTd>
                <MudTd DataLabel="Worked On">@context.WorkedOn.ToLocalTime().ToString(AppSetting.DATE_TIME_FORMAT)</MudTd>
                <MudTd DataLabel="Product">@context.Product</MudTd>
                <MudTd DataLabel="Operation">@context.Operation</MudTd>
                <MudTd DataLabel="Size">@context.Variant</MudTd>
                <MudTd DataLabel="Qty">@context.VariantQty</MudTd>
                <MudTd DataLabel="Price">@context.VarianPrice.ToCurrency()</MudTd>
                <MudTd DataLabel="Amt">@context.TotalAmount.ToCurrency()</MudTd>
                <MudTd DataLabel="Action">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" Size="Size.Small" OnClick="(async ()=> await OpenEditForm(context.Id))"></MudIconButton>
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Size="Size.Small"
                                   OnClick="(async () => await OnWorkRecordDelete(context.Id))"></MudIconButton>
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudTFootRow>
                    <MudTd colspan="8">
                        <MudStack Spacing="1">
                            <div class="d-flex flex-row-reverse">
                                <MudText>Total Amount: <b>@OperationItems.Sum(x => x.TotalAmount).ToCurrency()</b></MudText>
                            </div>
                            <div class="d-flex flex-row-reverse">
                                <MudText>Total Quantity: <b>@OperationItems.Sum(x => x.VariantQty)</b></MudText>
                            </div>
                        </MudStack>

                    </MudTd>
                </MudTFootRow>
            </FooterContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

<MudDialog IsVisible="showFilterWindow" Options="AppUIConstant.NormalDialogOption">
    <TitleContent>
        <MudText Typo="Typo.h6">Configure filter conditions</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing="3">
            <MudItem xs="12">
                <MudExpansionPanels>
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudBadge Icon="@Icons.Material.Rounded.FilterAlt" Color="Color.Success" Overlap="true" Bordered="true" Elevation="5">
                                <MudText Typo="Typo.subtitle2">Filter by 'Worked On'</MudText>
                            </MudBadge>
                        </TitleContent>
                        <ChildContent>
                            <MudRadioGroup @bind-SelectedOption="@filter.QuickFilter">
                                <MudRadio Dense="false" T="DateFilter?" Option="@DateFilter.ThisMonth" Color="Color.Primary">This Month</MudRadio>
                                <MudRadio Dense="false" T="DateFilter?" Option="@DateFilter.Today" Color="Color.Primary">Today</MudRadio>
                                <MudRadio Dense="false" T="DateFilter?" Option="@DateFilter.LastMonth" Color="Color.Primary">Last Month</MudRadio>
                                <MudRadio Dense="false" T="DateFilter?" Option="@DateFilter.Yesterday" Color="Color.Primary">Yesterday</MudRadio>
                            </MudRadioGroup>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudDatePicker @bind-Date="filter.WorkedFrom" Label="Worked From"></MudDatePicker>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudDatePicker @bind-Date="filter.WorkedTo" Label="Worked Till" MinDate="filter.WorkedFrom?.AddDays(1)"></MudDatePicker>
                                </MudItem>
                            </MudGrid>
                        </ChildContent>

                    </MudExpansionPanel>
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudBadge Icon="@Icons.Material.Rounded.FilterAlt" Color="Color.Success" Overlap="true" Bordered="true" Elevation="5"
                                      Visible="@(filter.WorkedBy != null && filter.WorkedBy.Any())">
                                <MudText Typo="Typo.subtitle2">Filter by 'Worked By'</MudText>
                            </MudBadge>
                        </TitleContent>
                        <ChildContent>
                            <MudSelect Dense="true" MultiSelection="true" HelperText="Worked By" T="Guid" Label="Worked By"
                                       SelectAll="true"
                                       @bind-SelectedValues="filter.WorkedBy" MultiSelectionTextFunc="GetMultiSelectedEmployees">
                                @foreach (var emp in Employees)
                                {
                                    <MudSelectItem T="Guid" Value="@(emp.EmployeeId)">@emp.EmployeeName</MudSelectItem>
                                }
                            </MudSelect>
                        </ChildContent>

                    </MudExpansionPanel>
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudBadge Icon="@Icons.Material.Rounded.FilterAlt" Color="Color.Success" Overlap="true" Bordered="true" Elevation="5"
                                      Visible="@(filter.Products != null && filter.Products.Any())">
                                <MudText Typo="Typo.subtitle2">Filter by 'Product Details'</MudText>
                            </MudBadge>
                        </TitleContent>
                        <ChildContent>
                            <MudSelect Dense="true" MultiSelection="true" HelperText="Product" T="int" Label="Product"
                                       SelectAll="true"
                                       @bind-SelectedValues="filter.Products" MultiSelectionTextFunc="GetMultiSelectedProducts">
                                @foreach (var prod in Products)
                                {
                                    <MudSelectItem T="int" Value="@(prod.ProductId)">@prod.ProductName</MudSelectItem>
                                }
                            </MudSelect>
                            <MudSelect Dense="true" MultiSelection="true" HelperText="Operations" T="int" Label="Operations"
                                       SelectAll="true"
                                       @bind-SelectedValues="filter.Operations" MultiSelectionTextFunc="GetMultiSelectedOperations">
                                @if ((filter.Products != null))
                                {
                                    @foreach (var operation in Products.Where(x => filter.Products.Contains(x.ProductId)).SelectMany(x => x.Operations))
                                    {
                                        <MudSelectItem T="int" Value="@(operation.OperationId)">@operation.OperationName</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex flex-row justify-space-between">
                    <div>
                        <MudButton OnClick="(()=> showFilterWindow = false)" Variant="Variant.Outlined" Color="Color.Transparent">Close</MudButton>
                        <MudButton OnClick="ResetFilterCondition" Variant="Variant.Outlined" Color="Color.Secondary">Clear Filter</MudButton>
                    </div>
                    <MudButton OnClick="FilterGridData" Variant="Variant.Filled" Color="Color.Success">Apply Filter</MudButton>
                </div>
            </MudItem>
        </MudGrid>

    </DialogContent>
</MudDialog>

@*Edit work history entry*@

<MudDialog IsVisible="showEditForm" Options="AppUIConstant.NormalDialogOption">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="ms-4 mt-5 mb-3">Edit Entry</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="editDailyOperation" ValidationDelay="1"
                 @ref="editOperationForm" Validation="editDailyOperationValidator.ValidateValue"
                 Class="ps-4">
            <div class="d-flex flex-row flex-wrap gap-3">
                <MudDatePicker @bind-Date="@editDailyOperation.WorkedOn"
                               For="@(() => editDailyOperation.WorkedOn)"
                               Margin="Margin.Dense" Variant="Variant.Outlined" Label="Date"> </MudDatePicker>
                <MudTimePicker @bind-Time="@editDailyOperation.WorkedTime"
                               For="@(() => editDailyOperation.WorkedTime)"
                               Margin="Margin.Dense" Variant="Variant.Outlined" Label="Time"> </MudTimePicker>

                <SearchableSelect T="Guid?" @bind-SelectedItem="editDailyOperation.WorkedBy" Label="Employee"
                                  Values="Employees.Select(x=> ((Guid?)x.EmployeeId, x.EmployeeName)).ToList()"
                                  For="@(() => editDailyOperation.WorkedBy)" />
                <SearchableSelect T="int?" @bind-SelectedItem="editDailyOperation.ProductId" Label="Product"
                                  Values="Products.Select(x=> ((int?)x.ProductId, x.ProductName)).ToList()"
                                  ValueChanged="OnEditFormProductSelect"
                                  For="@(() => editDailyOperation.ProductId)" />
                <SearchableSelect T="int?" @bind-SelectedItem="editDailyOperation.OperationId" Label="Operation"
                                  Values="Operations.Select(x=> ((int?)x.OperationId, x.OperationName)).ToList()"
                                  For="@(() => editDailyOperation.OperationId)" />
                <MudGrid>
                    <MudItem xs="6">
                        <MudSelect T="int?" @bind-Value="editDailyOperation.VariantId" Label="Size"
                                   For="@(() => editDailyOperation.VariantId)" Dense="true" Variant="Variant.Outlined" Margin="Margin.Dense">
                            @foreach (var variant in Variants)
                            {
                                <MudSelectItem Value="variant.ProductInstanceId" T="int?">@variant.SizeName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField @bind-Value="editDailyOperation.Quantity" Variant="Variant.Outlined" Min="1"
                                         Label="Quantity" Margin="Margin.Dense"
                                         For="@(() => editDailyOperation.Quantity)"></MudNumericField>
                    </MudItem>
                </MudGrid>
                <div class="d-flex flex-row justify-space-between my-8 w-100">
                    <div>
                        <MudButton Color="Color.Transparent" OnClick="(()=> showEditForm = false)">Close</MudButton>
                    </div>
                    <MudButton Color="Color.Success" Variant="MudBlazor.Variant.Filled" OnClick="EditWorkHistoryDetails">Submit</MudButton>
                </div>
            </div>
        </MudForm>

    </DialogContent>
</MudDialog>



@code {
    MudForm addOperationForm;
    DailyOperationDto dailyOperation { get; set; } = new();
    DailyOperationDtoValidator dailyOperationValidator { get; set; } = new();

    DailyOperationDetailDto editDailyOperation { get; set; } = new();
    MudForm editOperationForm;
    DailyOperationDetailDtoValidator editDailyOperationValidator = new();
    List<OperaitonVariantDto> Variants = new();

    ProductMappingDto[] Products = new ProductMappingDto[0];
    OperationMappingDto[] Operations = new OperationMappingDto[0];
    EmployeeMappingDto[] Employees = new EmployeeMappingDto[0];
    OperationItemDto[] OperationItems = new OperationItemDto[0];
    DailyOperationFilterDto filter = new();
    bool showFilterWindow = false;
    bool showEditForm = false;
    string userId = string.Empty;
    bool isDataLoading = false;

    bool showUpdateQuantityPopover = false;
    string sizeName = string.Empty;
    int? selectedQuantity = null;
    int? selectedSizeId = null;
    int? selectedProductId = null;
    int? selectedOperationId = null;
    int? selectedOperationInstanceId = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            filter = await Mediator.Send(new GetStoredFilterConditionQuery());

            var productsTask = Mediator.Send(new ProductMappingQuery());
            var employeesTask = Mediator.Send(new EmployeeMappingQuery());
            await Task.WhenAll(productsTask, employeesTask);
            Products = productsTask.Result;
            Employees = employeesTask.Result;

            isDataLoading = true;
            StateHasChanged();
            OperationItems = await Mediator.Send(BuildFilterDto());
            isDataLoading = false;
            StateHasChanged();
        }
    }

    void OnProductSelect(int? selectedProduct)
    {
        selectedProductId = selectedProduct;
        dailyOperation.OperationId = selectedOperationId = null;
        var prod = Products.FirstOrDefault(x => x.ProductId == selectedProduct);
        Operations = prod?.Operations
            ?? new OperationMappingDto[0];

        StateHasChanged();
    }

    void ToggleQuantityUpdatePopup(OperaitonVariantDto variant)
    {
        if (!showUpdateQuantityPopover)
        {
            selectedQuantity = null;
        }

        showUpdateQuantityPopover = !showUpdateQuantityPopover;
        sizeName = dailyOperation.VariantsPerOperation.FirstOrDefault(x => x.OperationInstanceId == variant.OperationInstanceId)?.SizeName;
        selectedSizeId = dailyOperation.VariantsPerOperation.FirstOrDefault(x => x.OperationInstanceId == variant.OperationInstanceId)?.SizeId;
        selectedOperationInstanceId = variant.OperationInstanceId;
    }

    async Task OnOperationSelect(int? selectedOperation)
    {
        selectedOperationId = selectedOperation;
        if (!selectedOperation.HasValue)
        {
            dailyOperation.VariantsPerOperation = new();
            return;
        }
        dailyOperation.VariantsPerOperation = await Mediator.Send(new GetOperationBalanceQuantityQuery
            {
                OperationId = selectedOperation.Value
            });
    }

    async Task UpdateQuantity()
    {
        if (!selectedQuantity.HasValue)
        {
            ToastService.Error("Please choose at least one size.");
            return;
        }

        if (!selectedSizeId.HasValue)
        {
            ToastService.Error("Please choose at least one size.");
            return;
        }
        await AppMediator.Send(new UpdateProductQuantityCommand
            {
                AddToExistingQuantity = true,
                ProductId = selectedProductId.Value,
                ProductQuantity = new List<ProductInstanceDetailDto>
                {
                    new()
                    {
                        Quantity = selectedQuantity.Value,
                        SizeId = selectedSizeId.Value
                    }
                }
            })
        .OnSuccess(async data =>
        {
            ToastService.Success("Quantites for given sizes updated successfully.");

            dailyOperation.VariantsPerOperation = await Mediator.Send(new GetOperationBalanceQuantityQuery
                {
                    OperationId = selectedOperationId.Value
                });
            showUpdateQuantityPopover = false;
            selectedSizeId = null;
            selectedQuantity = null;
            selectedOperationInstanceId = null;

            await InvokeAsync(StateHasChanged);

        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
        });
    }

    async Task OnEditFormProductSelect(int? selectedProduct)
    {
        var prod = Products.FirstOrDefault(x => x.ProductId == selectedProduct);
        Operations = prod?.Operations
            ?? new OperationMappingDto[0];
        Variants = await GetSelectedProductVariants(editDailyOperation.OperationId.Value);
        if (!Operations.Any(x => x.OperationId == editDailyOperation.OperationId))
        {
            editDailyOperation.OperationId = null;
            editDailyOperation.VariantId = null;
            editDailyOperation.Quantity = null;
        }
    }

    async Task ResetDetails()
    {
        dailyOperation = new();
        addOperationForm.ResetValidation();

        if (selectedOperationId != null)
        {
            dailyOperation.VariantsPerOperation = await GetSelectedProductVariants();
        }
    }

    async Task<List<OperaitonVariantDto>> GetSelectedProductVariants(int? operationId = null)
    {
        if (!operationId.HasValue)
        {
            operationId = selectedOperationId.Value;
        }
        return await Mediator.Send(new GetOperationBalanceQuantityQuery
            {
                OperationId = operationId.Value
            });
    }

    async Task SubmitDetails()
    {
        await addOperationForm.Validate();
        if (addOperationForm.IsValid)
        {
            await AppMediator.Send(Mapper.Map(dailyOperation, new SubmitDailyOperationCommand()))
                .OnSuccess(async data =>
                {
                    ToastService.Success("Daily operation added successfully.");
                    isDataLoading = true;
                    await InvokeAsync(StateHasChanged);
                    OperationItems = await Mediator.Send(BuildFilterDto());

                    await InvokeAsync(async () =>
                    {
                        var lastEmployeeSelected = dailyOperation.WorkedBy;
                        var lastProductSelected = dailyOperation.ProductId;
                        var lastDateSelected = dailyOperation.WorkedOn;
                        await ResetDetails();

                        // Reset the employee and product selected with last submoitted values
                        dailyOperation.WorkedBy = lastEmployeeSelected;
                        dailyOperation.ProductId = lastProductSelected;
                        dailyOperation.WorkedOn = lastDateSelected;
                        dailyOperation.VariantsPerOperation = await GetSelectedProductVariants();
                        StateHasChanged();
                    });
                })
                .OnError(err =>
                {
                    ToastService.Error(err.Message);
                });
            isDataLoading = false;
            StateHasChanged();
        }
    }

    async Task EditWorkHistoryDetails()
    {
        await editOperationForm.Validate();
        if (editOperationForm.IsValid)
        {
            await AppMediator.Send(Mapper.Map(editDailyOperation, new EditDailyOperationDetailCommand()))
                .OnSuccess(async data =>
                {
                    ToastService.Success("Daily operation updated successfully.");
                    isDataLoading = true;
                    showEditForm = false;
                    await InvokeAsync(StateHasChanged);
                    OperationItems = await Mediator.Send(BuildFilterDto());
                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                })
                .OnError(err =>
                {
                    ToastService.Error(err.Message);
                });
            isDataLoading = false;
            StateHasChanged();
        }
    }

    string GetMultiSelectedEmployees(List<string> selectedValues)
    {
        if (!selectedValues.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", selectedValues.Select(x => Employees.First(y => y.EmployeeId.ToString() == x).EmployeeName));
    }

    string GetMultiSelectedProducts(List<string> selectedValues)
    {
        if (!selectedValues.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", selectedValues.Select(x => Products.First(y => y.ProductId.ToString() == x).ProductName));
    }

    string GetMultiSelectedOperations(List<string> selectedValues)
    {
        if (!selectedValues.Any())
        {
            return string.Empty;
        }

        return string.Join(", ", selectedValues.Select(x => Products.SelectMany(x => x.Operations).First(y => y.OperationId.ToString() == x).OperationName));
    }

    async Task ResetFilterCondition()
    {
        filter = new();
        await SaveFilterConditionToStorage();
    }

    async Task FilterGridData()
    {
        showFilterWindow = false;

        isDataLoading = true;
        StateHasChanged();
        OperationItems = await Mediator.Send(BuildFilterDto());
        isDataLoading = false;
        StateHasChanged();
        await SaveFilterConditionToStorage();
    }

    DailyOperationsQuery BuildFilterDto()
    {
        return Mapper.Map(filter, new DailyOperationsQuery());
    }

    async Task SaveFilterConditionToStorage()
    {
        await Mediator.Send(new SaveFilterConditionCommand
            {
                Operations = filter.Operations,
                Products = filter.Products,
                QuickFilter = filter.QuickFilter,
                Sizes = filter.Sizes,
                WorkedBy = filter.WorkedBy,
                WorkedFrom = filter.WorkedFrom,
                WorkedTo = filter.WorkedTo
            });
    }

    async Task OpenEditForm(int workHistoryId)
    {
        showEditForm = true;
        editDailyOperation = await Mediator.Send(new GetDailyOperationDetailByIdQuery()
            {
                Id = workHistoryId
            });
    }

    async Task OnWorkRecordDelete(int workRecordId)
    {
        bool? delete = await DialogService.ShowMessageBox("Confirm"
            , "Are you sure you want to delete this record?"
            , yesText: "Delete"
            , cancelText: "Cancel",
            options: AppUIConstant.TitleDialogOption);
        if (delete == true)
        {
            await AppMediator.Send(new DeleteDailyOperationCommand
                {
                    Id = workRecordId
                })
            .OnSuccess(async (data) =>
            {
                ToastService.Success("Work record deleted successfully.");
                OperationItems = await Mediator.Send(BuildFilterDto());
                await InvokeAsync(StateHasChanged);
            })
            .OnError((err) =>
            {
                ToastService.Error(err.Message);
            });
        }
    }

    async Task<string> ExportDailyOperations()
    {
        return await Mediator.Send(Mapper.Map(filter, new DailyOperationsExportCommand()));
    }
}
