@using Kanakku.Application.Contracts.Presentation
@using Kanakku.Application.Models.Product
@using Kanakku.Application.Requests.Product
@using Kanakku.App.Contracts.Event
@using MediatR
@inject IMediator Mediator
@inject IAppMediator AppMediator
@inject IToastService ToastService

<MudPaper Class="px-4 py-2 pb-4">
    <MudTable Items="@productInstances" FixedHeader=true Hover="true" Breakpoint="Breakpoint.Sm"
              Striped=true Bordered=true Elevation="0"
              T="ProductInstanceDetailDto" Dense="true">
        <ToolBarContent>
            <div class="d-flex flex-row w-100 justify-space-between">
                <MudText Typo="Typo.h6">Product Sizes</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(()=> showQuantityUpdateDialog = true)">Update Quantity</MudButton>
            </div>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 10px;">S/N</MudTh>
            <MudTh>Size</MudTh>
            <MudTh>Quantity</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="S/N">@context.RowNumber</MudTd>
            <MudTd DataLabel="Size">@context.Size</MudTd>
            <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@*Update product quantity form*@
<MudDialog IsVisible="showQuantityUpdateDialog" Options="new DialogOptions{
CloseButton = false,
FullScreen = false,
}">
    <DialogContent>
        <MudPaper Elevation="0">
            <MudText Typo="Typo.h6" Class="mt-5 w-100 px-3">Update Product Quantities</MudText>
            <MudText Typo="Typo.subtitle2" Class="ms-3 mt-2 w-100 mb-5" Style="font-size: .7rem">Note: Quantity of all operations for all below selected sizes will be reset to given value.</MudText>
            <MudForm Model="productQuantities" ValidationDelay="1"
                     @ref="quantityForm">
                <MudStack Style="max-height: 60vh; overflow-y: scroll" Class="px-3">

                    @foreach (var variant in productQuantities)
                    {
                        <div class="d-flex flex-row flex-grow-1 gap-3 w-100">
                            <MudSelect HelperText="Size" T="int" Label="Size" Variant="MudBlazor.Variant.Text" @bind-Value="@variant.SizeId">
                                @foreach (var size in sizes)
                                {
                                    <MudSelectItem Value="@(size.Id)">@size.Value</MudSelectItem>
                                }
                            </MudSelect>

                            <MudNumericField @bind-Value="variant.Quantity"
                                         For="@(() => variant.Quantity)"
                                         Immediate="true"
                                         Label="Quantity"
                                         Min="0" />
                            <div>
                                <MudIconButton Icon="@Icons.Material.Filled.Remove" aria-label="remove"
                                           Variant="MudBlazor.Variant.Filled" Color="Color.Error" OnClick="(()=> RemoveProductQuantity(variant))"></MudIconButton>
                            </div>
                        </div>

                    }

                    @if (GetSizes().Any())
                    {
                        <div class="d-flex flex-row flex-grow-1 gap-3 w-100">
                            <MudSelect HelperText="Size" T="int" Label="Size" Variant="MudBlazor.Variant.Text" @bind-Value="@productQuantity.SizeId"
                                   For="@(() => productQuantity.SizeId)">
                                <MudSelectItem Value="0">Select</MudSelectItem>
                                @foreach (var size in GetSizes())
                                {
                                    <MudSelectItem Value="@(size.Id)">@size.Value</MudSelectItem>
                                }
                            </MudSelect>
                            <MudNumericField @bind-Value="productQuantity.Quantity"
                                         For="@(() => productQuantity.Quantity)"
                                         Immediate="true"
                                         Label="Quantity"
                                         Min="0" />
                            <div>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add"
                                           Variant="MudBlazor.Variant.Filled" Color="Color.Primary" OnClick="AddProductQuantity"></MudIconButton>
                            </div>
                        </div>
                    }

                </MudStack>
            </MudForm>
            <div class="d-flex flex-row justify-space-between my-8 w-100">
                <div>
                    <MudButton Color="Color.Transparent" OnClick="CloseForm">Close</MudButton>
                </div>
                <MudButton Color="Color.Success" Variant="MudBlazor.Variant.Filled" OnClick="UpdateQuantity">Update Quantity</MudButton>
            </div>
        </MudPaper>
    </DialogContent>
</MudDialog>
@code {
    [Parameter]
    public int ProductId { get; set; }

    ProductInstanceDetailDto[] productInstances = Array.Empty<ProductInstanceDetailDto>();
    bool showQuantityUpdateDialog = false;
    MudForm quantityForm;

    ProductInstanceDetailDto productQuantity = new();
    List<ProductInstanceDetailDto> productQuantities = new();
    List<SizeDto> sizes = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            sizes = await Mediator.Send(new GetAllSizeQuery());
            productInstances = await Mediator.Send(new GetProductInstancesByProductIdQuery()
                {
                    ProductId = ProductId
                });
            StateHasChanged();
        }
    }


    List<SizeDto> GetSizes()
    {
        return sizes.Where(x => !productQuantities.Select(y => y.SizeId).Contains(x.Id)).ToList();
    }

    void AddProductQuantity()
    {
        if (productQuantity.SizeId == 0)
        {
            return;
        }
        productQuantities.Add(productQuantity.Clone());

        productQuantity.Quantity = 0;
        productQuantity.SizeId = 0;
        productQuantity.Id = 0;
    }

    void RemoveProductQuantity(ProductInstanceDetailDto variant)
    {
        productQuantities.Remove(variant);
    }

    async Task UpdateQuantity()
    {
        if (!productQuantities.Any())
        {
            ToastService.Error("Please choose at least one size.");
            return;
        }
        await AppMediator.Send(new UpdateProductQuantityCommand
            {
                ProductId = ProductId,
                ProductQuantity = productQuantities
            })
        .OnSuccess(async data =>
        {
            productQuantities.Clear();
            productQuantity.Quantity = 0;
            productQuantity.SizeId = 0;
            productQuantity.Id = 0;
            ToastService.Success("Quantites for given sizes updated successfully.");
            productInstances = await Mediator.Send(new GetProductInstancesByProductIdQuery()
                {
                    ProductId = ProductId
                });
            showQuantityUpdateDialog = false;
            await InvokeAsync(StateHasChanged);
        })
        .OnError(err =>
        {
            ToastService.Error(err.Message);
        });
    }

    void CloseForm()
    {
        showQuantityUpdateDialog = false;
        StateHasChanged();
    }
}
