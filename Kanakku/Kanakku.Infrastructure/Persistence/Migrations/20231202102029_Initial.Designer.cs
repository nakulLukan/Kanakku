// <auto-generated />
using System;
using Kanakku.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kanakku.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231202102029_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kanakku.Domain.Attachment.BinaryResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FileFullName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BinaryResources");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ShortCode")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("ProductInstances");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("InternalName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("MasterId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("ProductSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InternalName = "small",
                            MasterId = 1,
                            Order = 1,
                            Size = "S"
                        },
                        new
                        {
                            Id = 2,
                            InternalName = "medium",
                            MasterId = 1,
                            Order = 2,
                            Size = "M"
                        },
                        new
                        {
                            Id = 3,
                            InternalName = "large",
                            MasterId = 1,
                            Order = 3,
                            Size = "L"
                        });
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductSizeMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MasterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductSizeMaster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MasterName = "General",
                            Order = 1
                        });
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductWorkInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NetQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("ProductInstanceId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductInstanceId");

                    b.HasIndex("WorkId");

                    b.ToTable("ProductWorkInstances");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPayPerHour")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.WorkCostHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInUse")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkCostHistories");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.WorkHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("VariantId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkDuration")
                        .HasColumnType("integer");

                    b.Property<int>("WorkId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WorkedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VariantId");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkHistories");
                });

            modelBuilder.Entity("Kanakku.Domain.Lookup.LookupDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DependentLookupDetailId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LookupMasterId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("DependentLookupDetailId");

                    b.HasIndex("LookupMasterId");

                    b.ToTable("LookupDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LookupMasterId = 1,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Kerala"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LookupMasterId = 1,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Tamil Nadu"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Palakkad"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Ernakulam"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Trissur"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Malappuram"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Kozhikode"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Alappuzha"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Idukki"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Kannur"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Kasaragod"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Alappuzha"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Kollam"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Kottayam"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Pathanamthitta"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Thiruvananthapuram"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 1,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Wayanad"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 2,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Coimbatore"
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupDetailId = 2,
                            IsActive = true,
                            LookupMasterId = 2,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            Value = "Chennai"
                        });
                });

            modelBuilder.Entity("Kanakku.Domain.Lookup.LookupMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DependentLookupMasterId")
                        .HasColumnType("integer");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DependentLookupMasterId");

                    b.ToTable("LookupMasters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            InternalName = "state",
                            IsActive = true,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc),
                            DependentLookupMasterId = 1,
                            InternalName = "district",
                            IsActive = true,
                            ModifiedOn = new DateTime(2022, 8, 14, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Kanakku.Domain.User.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Kanakku.Domain.User.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Designations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tailor"
                        });
                });

            modelBuilder.Entity("Kanakku.Domain.User.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<int?>("DpImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EpfRegNo")
                        .HasColumnType("text");

                    b.Property<string>("EsiRegNo")
                        .HasColumnType("text");

                    b.Property<int?>("IdProofImageId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber2")
                        .HasColumnType("text");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("ResignedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("DpImageId");

                    b.HasIndex("IdProofImageId");

                    b.HasIndex("StateId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Kanakku.Domain.User.EmployeeSalaryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Bonus")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DaysPresent")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmpId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Period")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("EmployeeSalaryHistories");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.Product", b =>
                {
                    b.HasOne("Kanakku.Domain.Attachment.BinaryResource", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductInstance", b =>
                {
                    b.HasOne("Kanakku.Domain.Inventory.Product", "Product")
                        .WithMany("ProductInstances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanakku.Domain.Inventory.ProductSize", "ProductSize")
                        .WithMany()
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductSize", b =>
                {
                    b.HasOne("Kanakku.Domain.Inventory.ProductSizeMaster", "Master")
                        .WithMany()
                        .HasForeignKey("MasterId");

                    b.Navigation("Master");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductWorkInstance", b =>
                {
                    b.HasOne("Kanakku.Domain.Inventory.ProductInstance", "ProductInstance")
                        .WithMany("ProductWorkInstances")
                        .HasForeignKey("ProductInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanakku.Domain.Inventory.Work", "Work")
                        .WithMany("ProductWorkInstances")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInstance");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.Work", b =>
                {
                    b.HasOne("Kanakku.Domain.Attachment.BinaryResource", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Kanakku.Domain.Inventory.Product", "Product")
                        .WithMany("Works")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.WorkCostHistory", b =>
                {
                    b.HasOne("Kanakku.Domain.Inventory.Work", "Work")
                        .WithMany("WorkCostHistories")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.WorkHistory", b =>
                {
                    b.HasOne("Kanakku.Domain.User.Employee", "Employee")
                        .WithMany("WorkHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanakku.Domain.Inventory.ProductInstance", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanakku.Domain.Inventory.Work", "Work")
                        .WithMany("WorkHistories")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Variant");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("Kanakku.Domain.Lookup.LookupDetail", b =>
                {
                    b.HasOne("Kanakku.Domain.Lookup.LookupDetail", "DependentLookupDetail")
                        .WithMany()
                        .HasForeignKey("DependentLookupDetailId");

                    b.HasOne("Kanakku.Domain.Lookup.LookupMaster", "LookupMaster")
                        .WithMany("LookupDetails")
                        .HasForeignKey("LookupMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependentLookupDetail");

                    b.Navigation("LookupMaster");
                });

            modelBuilder.Entity("Kanakku.Domain.Lookup.LookupMaster", b =>
                {
                    b.HasOne("Kanakku.Domain.Lookup.LookupMaster", "DependentLookupMaster")
                        .WithMany()
                        .HasForeignKey("DependentLookupMasterId");

                    b.Navigation("DependentLookupMaster");
                });

            modelBuilder.Entity("Kanakku.Domain.User.AppUser", b =>
                {
                    b.HasOne("Kanakku.Domain.Attachment.BinaryResource", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Kanakku.Domain.User.Employee", b =>
                {
                    b.HasOne("Kanakku.Domain.User.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kanakku.Domain.Lookup.LookupDetail", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Kanakku.Domain.Attachment.BinaryResource", "DisplayPicture")
                        .WithMany()
                        .HasForeignKey("DpImageId");

                    b.HasOne("Kanakku.Domain.Attachment.BinaryResource", "IdProof")
                        .WithMany()
                        .HasForeignKey("IdProofImageId");

                    b.HasOne("Kanakku.Domain.Lookup.LookupDetail", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Designation");

                    b.Navigation("DisplayPicture");

                    b.Navigation("District");

                    b.Navigation("IdProof");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Kanakku.Domain.User.EmployeeSalaryHistory", b =>
                {
                    b.HasOne("Kanakku.Domain.User.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.Product", b =>
                {
                    b.Navigation("ProductInstances");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.ProductInstance", b =>
                {
                    b.Navigation("ProductWorkInstances");
                });

            modelBuilder.Entity("Kanakku.Domain.Inventory.Work", b =>
                {
                    b.Navigation("ProductWorkInstances");

                    b.Navigation("WorkCostHistories");

                    b.Navigation("WorkHistories");
                });

            modelBuilder.Entity("Kanakku.Domain.Lookup.LookupMaster", b =>
                {
                    b.Navigation("LookupDetails");
                });

            modelBuilder.Entity("Kanakku.Domain.User.Employee", b =>
                {
                    b.Navigation("WorkHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
